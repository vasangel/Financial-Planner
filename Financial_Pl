import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk
import os
import re
import firebase_admin
from firebase_admin import credentials, firestore


# Initialize Firebase
cred_path = os.path.join(os.getcwd(), "C:/Users/Attilas/Desktop/Bill/Matrix/MyProjects/Python Financial Planner/login-43889-firebase-adminsdk-cqrdd-305656598d.json")

if not firebase_admin._apps:
    cred = credentials.Certificate(cred_path)
    firebase_admin.initialize_app(cred, {
        "databaseURL": "https://login-43889-default-rtdb.firebaseio.com/"
    })

background_image_path = os.path.join(os.getcwd(), "C:/Users/Attilas/Desktop/Bill/Matrix/MyProjects/Python Financial Planner/financial_planner_bg.jpg")

try:
    cred = credentials.Certificate(cred_path)
    if not firebase_admin._apps:
        firebase_admin.initialize_app(cred)
    db = firestore.client()
    print("Firebase initialized successfully.")
except Exception as e:
    print(f"Error initializing Firebase: {e}")
    messagebox.showerror("Error", "Failed to initialize Firebase. Check your configuration.")

# Save user credentials to Firebase
def save_credentials(username, password):
    try:
        hashed_password = password  # Replace with hashing logic for secure storage.
        user_data = {"username": username, "password": hashed_password}
        db.collection("users").document(username).set(user_data)
        print(f"User {username} saved successfully to Firebase.")
    except Exception as e:
        print(f"Error saving credentials: {e}")
        messagebox.showerror("Error", "Failed to save user data.")

# Load user credentials from Firebase
def load_credentials(username):
    try:
        doc = db.collection("users").document(username).get()
        if doc.exists:
            return doc.to_dict()
        else:
            return None
    except Exception as e:
        print(f"Error loading credentials: {e}")
        messagebox.showerror("Error", "Failed to load user data.")
        return None

# Create main application window
root = tk.Tk()
root.title("Financial Coordinator")
root.geometry("1000x600")

# Load and set background image
try:
    background_image = Image.open(background_image_path)
    background_image = background_image.resize((1000, 600), Image.LANCZOS)
    bg_image = ImageTk.PhotoImage(background_image)
except Exception as e:
    print(f"Error loading background image: {e}")
    bg_image = None

canvas = tk.Canvas(root, width=1000, height=600)
canvas.pack(fill="both", expand=True)
if bg_image:
    canvas.create_image(0, 0, image=bg_image, anchor="nw")

# Signup Functionality
def signup_process():
    def handle_signup():
        username = username_entry.get()
        password = password_entry.get()

        if len(username) < 5:
            messagebox.showerror("Error", "Username must be at least 5 characters long.")
            return
        if not re.match(r'^(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{5,}$', password):
            messagebox.showerror("Error", "Password must include uppercase, number, and special character.")
            return

        if load_credentials(username):
            messagebox.showerror("Error", "Username already exists.")
            return

        save_credentials(username, password)
        messagebox.showinfo("Success", "Signup successful!")
        signup_frame.destroy()

    signup_frame = tk.Frame(root, bg="white", padx=20, pady=20)
    signup_frame.place(relx=0.5, rely=0.5, anchor="center")

    tk.Label(signup_frame, text="Sign Up", font=("Arial", 18), bg="white").pack(pady=10)
    tk.Label(signup_frame, text="Username:", bg="white").pack(anchor="w")
    username_entry = tk.Entry(signup_frame, width=30)
    username_entry.pack(pady=5)

    tk.Label(signup_frame, text="Password:", bg="white").pack(anchor="w")
    password_entry = tk.Entry(signup_frame, show="*", width=30)
    password_entry.pack(pady=5)

    def toggle_password_visibility():
        if password_entry.cget('show') == '*':
            password_entry.config(show='')
        else:
            password_entry.config(show='*')

    tk.Checkbutton(signup_frame, text="Show Password", command=toggle_password_visibility, bg="white").pack(pady=5)
    tk.Button(signup_frame, text="Sign Up", command=handle_signup).pack(pady=10)

# Login Functionality
def login_process():
    def handle_login():
        username = username_entry.get()
        password = password_entry.get()

        user_data = load_credentials(username)
        if not user_data:
            messagebox.showerror("Error", "Username not found.")
            return

        if user_data["password"] != password:
            messagebox.showerror("Error", "Incorrect password. Try again.")
            return

        messagebox.showinfo("Welcome", f"Welcome to your Financial Planner, {username}!")
        login_frame.destroy()

    login_frame = tk.Frame(root, bg="white", padx=20, pady=20)
    login_frame.place(relx=0.5, rely=0.5, anchor="center")

    tk.Label(login_frame, text="Login", font=("Arial", 18), bg="white").pack(pady=10)
    tk.Label(login_frame, text="Username:", bg="white").pack(anchor="w")
    username_entry = tk.Entry(login_frame, width=30)
    username_entry.pack(pady=5)

    tk.Label(login_frame, text="Password:", bg="white").pack(anchor="w")
    password_entry = tk.Entry(login_frame, show="*", width=30)
    password_entry.pack(pady=5)

    def toggle_password_visibility():
        if password_entry.cget('show') == '*':
            password_entry.config(show='')
        else:
            password_entry.config(show='*')

    tk.Checkbutton(login_frame, text="Show Password", command=toggle_password_visibility, bg="white").pack(pady=5)
    tk.Button(login_frame, text="Login", command=handle_login).pack(pady=10)

signup_button = tk.Button(
    root,
    text="Sign Up",
    command=signup_process,
    font=("Arial", 14),
    bg="lightblue",
    padx=20,
    pady=10,
)

login_button = tk.Button(
    root,
    text="Login",
    command=login_process,
    font=("Arial", 14),
    bg="lightgreen",
    padx=20,
    pady=10,
)

canvas.create_window(500, 200, window=signup_button)
canvas.create_window(500, 300, window=login_button)

# Run the GUI event loop
root.mainloop()
